	What happens when you initialize a repository? Why do you need to do it?

	To inialize a repository I used "git init" command. After initializatuion a new hidden file was created called ".git". I needed to create a new repository in order to version control my project files.

	How is the staging area different from the working directory and the repository? What value do you think it offers?

	Stagging area provides the ability to view and recheck files that are being added to repository. Working directory are the local work space where the files are stored. Repository is a place where all your comitted files and snapshots are saved.

	How can you use the staging area to make sure you have one commit per logical change?

	Stagging area provides all the list of files that are to be comitted. Performing "git diff --staged" allows to check the changes made to the file, this way one commit per logical change can be made.

	What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	Branches can be helpfull in many cases, mostly during building a new feature or fixing a bug. The worst case is during experimenting a new feature.

	How do the diagrams help you visualize the branch structure?

	Creating diagrams of the branches helps in determining the flow of the project.

	What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	Merging two branches together allows to combine new fuctionality or work performed on two different branches by two different users at different time.

	What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

	git automatic merge is a good practice when there are different files modified by different user or on different branches, but if two branches have a piece of code that has been modified at different time then manual merge is the best way to resolve the conflict and merge.